openapi: 3.0.0
info:
  title: Hex API
  version: "1.0.0"
  description: |
    This is the complete OpenAPI specification for the Hex API, based on the provided API Blueprint documentation. The Hex API is a REST-based API currently in beta.  The implementation examples are from https://hex.pm/api. 

    ### Media Types
    The API supports JSON and a safe subset of Erlang terms for requests and responses. Clients should specify their desired format in the `Accept` header. 
    - `application/json`
    - `application/vnd.hex+json`
    - `application/vnd.hex+erlang`

    ### Rate Limiting
    The API limits requests to 100 per minute per IP, or 500 per minute for authenticated users.  Conditional requests resulting in a `304 Not Modified` do not count towards the limit.  The following headers are returned with each request to indicate the current status: 
    - `X-RateLimit-Limit`: Maximum requests per minute. 
    - `X-RateLimit-Remaining`: Remaining requests in the current window. 
    - `X-RateLimit-Reset`: UNIX timestamp for when the limit resets. 

    ### User-Agent
    All requests MUST include a valid `User-Agent` header, or they will be rejected with a `400 Bad Request`.  Example: `User-Agent: Hex/0.12.1 (Elixir/1.3.0) (OTP/19.0)`. 

    ### Pagination
    Collection resources are paginated, returning up to 100 items per page.  The `page` query parameter can be used to navigate through pages, which are 1-indexed. 

    ### Authentication
    Authentication is performed via Basic Authentication (for generating API tokens) or an API token.  Failed authentication returns `401 Unauthorized`.
servers:
  - url: https://hex.pm/api
    description: Production server
tags:
  - name: Users
    description: Endpoints for managing user accounts.
  - name: Repositories
    description: Endpoints for managing repositories.
  - name: Packages
    description: Endpoints for searching and managing packages.
  - name: Package Releases
    description: Endpoints for publishing and managing package releases.
  - name: Package Documentation
    description: Endpoints for managing package documentation.
  - name: Package Owners
    description: Endpoints for managing package ownership.
  - name: API Keys
    description: Endpoints for managing authentication keys.
paths:
  /users:
    post:
      tags:
        - Users
      summary: Create a User
      description: Creates a new user. A confirmation email with an activation link is sent to the provided email address.  The account must be activated before it can be used.  Clients must display a link to the Hex Terms of Service.
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
      responses:
        "201":
          description: User created successfully.
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: The URL of the newly created user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
  /users/{username_or_email}:
    parameters:
      - name: username_or_email
        in: path
        required: true
        description: The username or primary email address of the user.
        schema:
          type: string
    get:
      tags:
        - Users
      summary: Fetch a User
      operationId: getUser
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          $ref: "#/components/responses/NotFound"
  /users/me:
    get:
      tags:
        - Users
      summary: Fetch Currently Authenticated User
      operationId: getCurrentUser
      security:
        - apiTokenAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithOrgs"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /users/{username_or_email}/reset:
    parameters:
      - name: username_or_email
        in: path
        required: true
        description: The username or email address of the user.
        schema:
          type: string
    post:
      tags:
        - Users
      summary: Reset User Password
      description: Initiates the password reset process. An email with a reset link will be sent to the user's primary email address.
      operationId: resetUserPassword
      security:
        - apiTokenAuth: []
      responses:
        "204":
          description: Password reset process initiated successfully.
        "401":
          $ref: "#/components/responses/Unauthorized"
  /repos:
    get:
      tags:
        - Repositories
      summary: List all Repositories
      description: Returns all public repositories and, if authenticated, all repositories the user is a member of.
      operationId: listRepos
      security:
        - apiTokenAuth: []
      responses:
        "200":
          description: A list of repositories.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Repository"
  /repos/{name}:
    parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Repositories
      summary: Fetch a Repository
      operationId: getRepo
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Repository"
        "404":
          $ref: "#/components/responses/NotFound"
  /packages:
    get:
      tags:
        - Packages
      summary: List all Packages
      description: Returns a paginated list of packages. Results can be sorted and searched.
      operationId: listPackages
      parameters:
        - name: sort
          in: query
          description: Field to sort by.
          schema:
            type: string
            enum: [name, downloads, inserted_at, updated_at]
            default: name
        - name: search
          in: query
          description: Search string. See API documentation for syntax.
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination.
          schema:
            type: integer
            default: 1
      responses:
        "200":
          description: A paginated list of packages.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Package"
  /packages/{name}:
    parameters:
      - name: name
        in: path
        required: true
        description: The name of the package.
        schema:
          type: string
    get:
      tags:
        - Packages
      summary: Fetch a Package
      operationId: getPackage
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Package"
        "404":
          $ref: "#/components/responses/NotFound"
  /packages/{name}/releases/{version}:
    parameters:
      - name: name
        in: path
        required: true
        description: The name of the package.
        schema:
          type: string
      - name: version
        in: path
        required: true
        description: The release version.
        schema:
          type: string
    get:
      tags:
        - Package Releases
      summary: Fetch a Release
      operationId: getRelease
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Release"
        "404":
          $ref: "#/components/responses/NotFound"
  /publish:
    post:
      tags:
        - Package Releases
      summary: Publish a Release
      description: Publishes a new release version of a package. This will also create the package if it does not exist. The request body must be a package tarball.
      operationId: publishRelease
      security:
        - apiTokenAuth: []
      requestBody:
        description: A gzipped tarball containing the package contents.
        required: true
        content:
          application/gzip:
            schema:
              type: string
              format: binary
      responses:
        "201":
          description: Release published successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Release"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /packages/{name}/releases/{version}/retire:
    parameters:
      - name: name
        in: path
        required: true
        description: The package name.
        schema:
          type: string
      - name: version
        in: path
        required: true
        description: The release version.
        schema:
          type: string
    post:
      tags:
        - Package Releases
      summary: Mark Release as Retired
      operationId: retireRelease
      security:
        - apiTokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RetirementPayload"
      responses:
        "204":
          description: The release was successfully marked as retired.
        "401":
          $ref: "#/components/responses/Unauthorized"
    delete:
      tags:
        - Package Releases
      summary: Unmark Release as Retired
      operationId: unretireRelease
      security:
        - apiTokenAuth: []
      responses:
        "204":
          description: The release was successfully unmarked as retired.
        "401":
          $ref: "#/components/responses/Unauthorized"
  /packages/{name}/releases/{version}/docs:
    parameters:
      - name: name
        in: path
        required: true
        description: The package name.
        schema:
          type: string
      - name: version
        in: path
        required: true
        description: The release version.
        schema:
          type: string
    post:
      tags:
        - Package Documentation
      summary: Publish Package Documentation
      description: Upload documentation for a specific package release. The body must be a gzipped tarball containing the documentation files, including an `index.html`.
      operationId: publishDocs
      security:
        - apiTokenAuth: []
      requestBody:
        required: true
        content:
          application/gzip:
            schema:
              type: string
              format: binary
      responses:
        "201":
          description: Documentation published successfully.
          headers:
            Location:
              schema:
                type: string
                format: uri
        "401":
          $ref: "#/components/responses/Unauthorized"
    delete:
      tags:
        - Package Documentation
      summary: Remove Package Documentation
      operationId: deleteDocs
      security:
        - apiTokenAuth: []
      responses:
        "204":
          description: Documentation removed successfully.
        "401":
          $ref: "#/components/responses/Unauthorized"
  /packages/{name}/owners:
    parameters:
      - name: name
        in: path
        required: true
        description: The package name.
        schema:
          type: string
    get:
      tags:
        - Package Owners
      summary: Fetch Package Owners
      operationId: getOwners
      security:
        - apiTokenAuth: []
      responses:
        "200":
          description: A list of package owners.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Owner"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /packages/{name}/owners/{email}:
    parameters:
      - name: name
        in: path
        required: true
        description: The package name.
        schema:
          type: string
      - name: email
        in: path
        required: true
        description: The email address of the user to add as an owner.
        schema:
          type: string
          format: email
    put:
      tags:
        - Package Owners
      summary: Add a Package Owner
      operationId: addOwner
      security:
        - apiTokenAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                level:
                  type: string
                  enum: [full, maintainer]
                  default: maintainer
      responses:
        "204":
          description: Owner added successfully.
        "401":
          $ref: "#/components/responses/Unauthorized"
    delete:
      tags:
        - Package Owners
      summary: Remove a Package Owner
      operationId: removeOwner
      security:
        - apiTokenAuth: []
      responses:
        "204":
          description: Owner removed successfully.
        "401":
          $ref: "#/components/responses/Unauthorized"
  /keys:
    get:
      tags:
        - API Keys
      summary: List all API Keys
      operationId: listKeys
      security:
        - apiTokenAuth: []
      responses:
        "200":
          description: A list of the user's API keys.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiKey"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      tags:
        - API Keys
      summary: Create an API Key
      description: Creates a new API key. This endpoint requires Basic Authentication.  The key's secret is only returned on creation and must be stored securely.
      operationId: createKey
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiKeyCreate"
      responses:
        "201":
          description: API Key created successfully.
          headers:
            Location:
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKeyWithSecret"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /keys/{name}:
    parameters:
      - name: name
        in: path
        required: true
        description: The name of the API key.
        schema:
          type: string
    get:
      tags:
        - API Keys
      summary: Fetch an API Key
      operationId: getKey
      security:
        - apiTokenAuth: []
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKey"
        "401":
          $ref: "#/components/responses/Unauthorized"
    delete:
      tags:
        - API Keys
      summary: Remove an API Key
      operationId: removeKey
      security:
        - apiTokenAuth: []
      responses:
        "204":
          description: Key removed successfully.
        "401":
          $ref: "#/components/responses/Unauthorized"
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      description: Basic Authentication used for creating API tokens.
    apiTokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: API Token authentication. The value should be the token secret.
  responses:
    Unauthorized:
      description: Authentication failed.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Forbidden:
      description: Access to the resource is forbidden.
    NotFound:
      description: The requested resource was not found.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    UnprocessableEntity:
      description: Validation failed due to invalid parameters.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationError"
  schemas:
    Error:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
    ValidationError:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            errors:
              type: object
              additionalProperties:
                type: string
    User:
      type: object
      required: [username, email, inserted_at, updated_at, url]
      properties:
        username:
          type: string
          description: User's unique username.
        email:
          type: string
          format: email
          description: User's primary email address.
        inserted_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        url:
          type: string
          format: uri
    UserCreate:
      type: object
      required: [username, password, email]
      properties:
        username:
          type: string
          pattern: "^[A-Za-z0-9_\\-.]+$"
          description: Alphanumeric characters, underscores, hyphens, and dots. Case insensitive.
        password:
          type: string
          format: password
          description: A printable UTF-8 string.
        email:
          type: string
          format: email
    UserWithOrgs:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          required: [organizations]
          properties:
            organizations:
              type: array
              items:
                type: object
                required: [name, role]
                properties:
                  name:
                    type: string
                    description: Name of the organization.
                  role:
                    type: string
                    description: User's role in the organization.
    Repository:
      type: object
      required: [name, public, active, billing_active, inserted_at, updated_at]
      properties:
        name:
          type: string
        public:
          type: boolean
        active:
          type: boolean
        billing_active:
          type: boolean
        inserted_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Package:
      type: object
      required: [name, meta, downloads, releases, inserted_at, updated_at, url]
      properties:
        name:
          type: string
        repository:
          type: string
        private:
          type: boolean
        meta:
          type: object
          properties:
            description:
              type: string
            licenses:
              type: array
              items:
                type: string
            links:
              type: object
              additionalProperties:
                type: string
                format: uri
        downloads:
          type: object
          properties:
            all:
              type: integer
            week:
              type: integer
            day:
              type: integer
        releases:
          type: array
          items:
            type: object
            properties:
              version:
                type: string
              url:
                type: string
                format: uri
        inserted_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        url:
          type: string
          format: uri
        html_url:
          type: string
          format: uri
        docs_html_url:
          type: string
          format: uri
    Release:
      type: object
      required:
        [
          version,
          has_docs,
          meta,
          dependencies,
          downloads,
          inserted_at,
          updated_at,
          url,
          package_url,
        ]
      properties:
        version:
          type: string
        has_docs:
          type: boolean
        meta:
          type: object
          properties:
            build_tools:
              type: array
              items:
                type: string
        requirements:
          type: object
          additionalProperties:
            type: object
            properties:
              name:
                type: string
              requirement:
                type: string
              optional:
                type: boolean
              app:
                type: string
        retired:
          type: object
          properties:
            reason:
              type: string
              enum: [other, invalid, security, deprecated, renamed]
            message:
              type: string
        downloads:
          type: integer
        inserted_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        url:
          type: string
          format: uri
        package_url:
          type: string
          format: uri
        html_url:
          type: string
          format: uri
        docs_html_url:
          type: string
          format: uri
    RetirementPayload:
      type: object
      required: [reason]
      properties:
        reason:
          type: string
          enum: [other, invalid, security, deprecated, renamed]
          description: Reason for retiring the release.
        message:
          type: string
          description: An additional, clarifying message for the retirement.
    Owner:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          required: [level]
          properties:
            level:
              type: string
              enum: [full, maintainer]
              description: Ownership level. 'full' owners can manage other owners.
    ApiKey:
      type: object
      required: [name, permissions, inserted_at, updated_at, url]
      properties:
        name:
          type: string
        permissions:
          type: array
          items:
            type: object
            properties:
              domain:
                type: string
                enum: [api, repository, repositories]
              resource:
                type: string
        revoked_at:
          type: string
          format: date-time
          nullable: true
        inserted_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        url:
          type: string
          format: uri
    ApiKeyCreate:
      type: object
      required: [name]
      properties:
        name:
          type: string
        permissions:
          type: array
          items:
            type: object
            properties:
              domain:
                type: string
                enum: [api, repository, repositories]
              resource:
                type: string
    ApiKeyWithSecret:
      allOf:
        - $ref: "#/components/schemas/ApiKey"
        - type: object
          required: [secret]
          properties:
            secret:
              type: string
              description: The key secret, a 32 character hex encoded string. Only returned on creation.
